// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.4.5
// Machine:  WIN-34SHIOK28G3
// DateTime: 2016/6/2 上午 10:46:30
// UserName: HungFu Lee
// Input file <E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y - 2016/5/15 下午 04:23:47>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace WaveTextFormatter
{
public enum Tokens {
    error=1,EOF=2,WORD=3,DIGIT=4,FLOATVALUE=5,STRING=6,
    FILENAME=7,KEYWORDS=8,KEYWORDS_TEMP=9,COMMENT=10,NEWLINE=11,STAR=12,
    SHARP=13};

public struct ValueType
#line 2 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{
#line 3 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	public int integer;
#line 4 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	public string stringVal;
#line 5 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	public Expr expr;
#line 6 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	public Tokens token;
#line 7 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	public int line;
#line 8 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[38];
  private static State[] states = new State[49];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "statement_list", "statement", "optional_comment_or_newline", 
      "sound_define_block_statement", "initial_sound_define_block", "begin_filenamelist", 
      "filenamelist", "end_filenamelist", "initial_setting", "arg", "linedefine", 
      "comment_or_newline", "lineitem", "symbol", "temp_setting", "float", "digit", 
      "filename", "string", };

  static Parser() {
    states[0] = new State(new int[]{8,43,2,48,1,-4,10,-4,11,-4},new int[]{-1,1,-3,3,-4,47,-6,11,-7,12,-11,45});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{1,9,8,43,2,-2,10,-29,11,-29},new int[]{-5,4,-4,8,-6,11,-7,12,-11,45});
    states[4] = new State(new int[]{10,6,11,7,1,-6,8,-6,2,-6},new int[]{-14,5});
    states[5] = new State(-30);
    states[6] = new State(-31);
    states[7] = new State(-32);
    states[8] = new State(-7);
    states[9] = new State(new int[]{11,10});
    states[10] = new State(-8);
    states[11] = new State(-9);
    states[12] = new State(new int[]{12,41,8,43},new int[]{-8,13,-11,39});
    states[13] = new State(new int[]{3,20,9,22},new int[]{-9,14,-13,37,-15,36,-16,19,-17,21});
    states[14] = new State(new int[]{1,32,13,34,3,20,9,22,10,6,11,7},new int[]{-10,15,-13,16,-14,31,-15,36,-16,19,-17,21});
    states[15] = new State(-10);
    states[16] = new State(new int[]{10,6,11,7,3,20,9,22},new int[]{-14,17,-15,18,-16,19,-17,21});
    states[17] = new State(-17);
    states[18] = new State(-21);
    states[19] = new State(-22);
    states[20] = new State(-33);
    states[21] = new State(-23);
    states[22] = new State(new int[]{5,25,4,27,7,29,3,20},new int[]{-12,23,-18,24,-19,26,-20,28,-16,30});
    states[23] = new State(-24);
    states[24] = new State(-25);
    states[25] = new State(-34);
    states[26] = new State(-26);
    states[27] = new State(-35);
    states[28] = new State(-27);
    states[29] = new State(-37);
    states[30] = new State(-28);
    states[31] = new State(-18);
    states[32] = new State(new int[]{11,33});
    states[33] = new State(-19);
    states[34] = new State(-29,new int[]{-5,35});
    states[35] = new State(new int[]{10,6,11,7,1,-15,8,-15,2,-15},new int[]{-14,5});
    states[36] = new State(-20);
    states[37] = new State(new int[]{10,6,11,7,3,20,9,22},new int[]{-14,38,-15,18,-16,19,-17,21});
    states[38] = new State(-16);
    states[39] = new State(-29,new int[]{-5,40});
    states[40] = new State(new int[]{10,6,11,7,12,-12,8,-12},new int[]{-14,5});
    states[41] = new State(-29,new int[]{-5,42});
    states[42] = new State(new int[]{10,6,11,7,3,-14,9,-14},new int[]{-14,5});
    states[43] = new State(new int[]{5,25,4,27,7,29,3,20},new int[]{-12,44,-18,24,-19,26,-20,28,-16,30});
    states[44] = new State(-13);
    states[45] = new State(-29,new int[]{-5,46});
    states[46] = new State(new int[]{10,6,11,7,12,-11,8,-11},new int[]{-14,5});
    states[47] = new State(-5);
    states[48] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{2});
    rules[4] = new Rule(-3, new int[]{});
    rules[5] = new Rule(-3, new int[]{-4});
    rules[6] = new Rule(-3, new int[]{-3,-5});
    rules[7] = new Rule(-3, new int[]{-3,-4});
    rules[8] = new Rule(-3, new int[]{-3,1,11});
    rules[9] = new Rule(-4, new int[]{-6});
    rules[10] = new Rule(-6, new int[]{-7,-8,-9,-10});
    rules[11] = new Rule(-7, new int[]{-11,-5});
    rules[12] = new Rule(-7, new int[]{-7,-11,-5});
    rules[13] = new Rule(-11, new int[]{8,-12});
    rules[14] = new Rule(-8, new int[]{12,-5});
    rules[15] = new Rule(-10, new int[]{13,-5});
    rules[16] = new Rule(-9, new int[]{-13,-14});
    rules[17] = new Rule(-9, new int[]{-9,-13,-14});
    rules[18] = new Rule(-9, new int[]{-9,-14});
    rules[19] = new Rule(-9, new int[]{-9,1,11});
    rules[20] = new Rule(-13, new int[]{-15});
    rules[21] = new Rule(-13, new int[]{-13,-15});
    rules[22] = new Rule(-15, new int[]{-16});
    rules[23] = new Rule(-15, new int[]{-17});
    rules[24] = new Rule(-17, new int[]{9,-12});
    rules[25] = new Rule(-12, new int[]{-18});
    rules[26] = new Rule(-12, new int[]{-19});
    rules[27] = new Rule(-12, new int[]{-20});
    rules[28] = new Rule(-12, new int[]{-16});
    rules[29] = new Rule(-5, new int[]{});
    rules[30] = new Rule(-5, new int[]{-5,-14});
    rules[31] = new Rule(-14, new int[]{10});
    rules[32] = new Rule(-14, new int[]{11});
    rules[33] = new Rule(-16, new int[]{3});
    rules[34] = new Rule(-18, new int[]{5});
    rules[35] = new Rule(-19, new int[]{4});
    rules[36] = new Rule(-21, new int[]{6});
    rules[37] = new Rule(-20, new int[]{7});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> statement_list
#line 15 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{  }
        break;
      case 5: // statement_list -> statement
#line 20 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{ 
#line 21 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	   if(!ValueStack[ValueStack.Depth-1].expr.IsSection()) {
#line 22 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	      parserStatus.currentSection.AddArgument(ValueStack[ValueStack.Depth-1].expr); 
#line 23 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	   }
#line 24 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	   parserStatus.CurrentExpr=CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr; 
#line 25 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	   parserStatus.flatStatements.Add(ValueStack[ValueStack.Depth-1].expr);
#line 26 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	}
        break;
      case 6: // statement_list -> statement_list, optional_comment_or_newline
#line 27 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{
#line 28 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	   CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-2].expr;
#line 29 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	}
        break;
      case 7: // statement_list -> statement_list, statement
#line 31 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{ 
#line 32 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	   if(!ValueStack[ValueStack.Depth-1].expr.IsSection()){
#line 33 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	      parserStatus.currentSection.AddArgument(ValueStack[ValueStack.Depth-1].expr);
#line 34 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	   }
#line 35 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	   parserStatus.CurrentExpr=CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-2].expr; 
#line 36 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	   parserStatus.flatStatements.Add(ValueStack[ValueStack.Depth-1].expr);
#line 37 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	}
        break;
      case 8: // statement_list -> statement_list, error, NEWLINE
#line 38 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{ 
#line 39 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
		if(onParseErrorListener!=null){
#line 40 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
		Console.WriteLine("ERROR...{0} near line {1}",ValueStack[ValueStack.Depth-3].stringVal,parserStatus.CurrentLine); 
#line 41 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
			onParseErrorListener(parserStatus.CurrentLine,ValueStack[ValueStack.Depth-3].stringVal,parserStatus.CurrentExpr);
#line 42 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
		}
#line 43 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
		else{
#line 44 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
		   Console.WriteLine("ERROR...{0} near line {1}",ValueStack[ValueStack.Depth-3].stringVal,parserStatus.CurrentLine); 
#line 45 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
		}
#line 46 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
		yyerrok(); 
#line 47 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	}
        break;
      case 10: // sound_define_block_statement -> initial_sound_define_block, begin_filenamelist, 
               //                                 filenamelist, end_filenamelist
#line 53 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{
#line 54 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	   CurrentSemanticValue.expr=Xcons.List(ValueStack[ValueStack.Depth-4].expr,ValueStack[ValueStack.Depth-2].expr);
#line 55 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	}
        break;
      case 11: // initial_sound_define_block -> initial_setting, optional_comment_or_newline
#line 59 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{ CurrentSemanticValue.expr=Xcons.InitSetList(ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 12: // initial_sound_define_block -> initial_sound_define_block, initial_setting, 
               //                               optional_comment_or_newline
#line 60 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{ CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-3].expr; ValueStack[ValueStack.Depth-3].expr.AddArgument(ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 13: // initial_setting -> KEYWORDS, arg
#line 62 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{CurrentSemanticValue.expr=Xcons.KeyWord(ValueStack[ValueStack.Depth-2].stringVal,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 14: // begin_filenamelist -> STAR, optional_comment_or_newline
#line 64 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{  }
        break;
      case 15: // end_filenamelist -> SHARP, optional_comment_or_newline
#line 65 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{ }
        break;
      case 16: // filenamelist -> linedefine, comment_or_newline
#line 66 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{CurrentSemanticValue.expr=Xcons.NameArgMapList(ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 17: // filenamelist -> filenamelist, linedefine, comment_or_newline
#line 67 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-3].expr;  ValueStack[ValueStack.Depth-3].expr.AddArgument(ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 18: // filenamelist -> filenamelist, comment_or_newline
#line 68 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{ CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-2].expr; }
        break;
      case 19: // filenamelist -> filenamelist, error, NEWLINE
#line 69 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{
#line 70 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	   CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-3].expr;
#line 71 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	   if(onParseErrorListener!=null){
#line 72 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
			onParseErrorListener(parserStatus.CurrentLine,ValueStack[ValueStack.Depth-3].stringVal,parserStatus.CurrentExpr);
#line 73 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
		}
#line 74 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
		else{
#line 75 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
		   Console.WriteLine("ERROR...{0} near line {1}",ValueStack[ValueStack.Depth-3].stringVal,parserStatus.CurrentLine); 
#line 76 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
		}
#line 77 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
	}
        break;
      case 20: // linedefine -> lineitem
#line 79 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{ CurrentSemanticValue.expr=Xcons.List(ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 21: // linedefine -> linedefine, lineitem
#line 80 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{ ValueStack[ValueStack.Depth-2].expr.AddArgument(ValueStack[ValueStack.Depth-1].expr); CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-2].expr; }
        break;
      case 24: // temp_setting -> KEYWORDS_TEMP, arg
#line 84 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{CurrentSemanticValue.expr=Xcons.KeyWord(ValueStack[ValueStack.Depth-2].stringVal,ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 33: // symbol -> WORD
#line 94 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{ parserStatus.CurrentExpr=CurrentSemanticValue.expr=Xcons.Symbol(ValueStack[ValueStack.Depth-1].stringVal); }
        break;
      case 34: // float -> FLOATVALUE
#line 97 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{ parserStatus.CurrentExpr=CurrentSemanticValue.expr=Xcons.FloatConstant(ValueStack[ValueStack.Depth-1].stringVal); }
        break;
      case 35: // digit -> DIGIT
#line 98 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{ parserStatus.CurrentExpr=CurrentSemanticValue.expr=Xcons.IntConstant(ValueStack[ValueStack.Depth-1].stringVal); }
        break;
      case 36: // string -> STRING
#line 99 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{ parserStatus.CurrentExpr=CurrentSemanticValue.expr=Xcons.StringConstant(ValueStack[ValueStack.Depth-1].stringVal); }
        break;
      case 37: // filename -> FILENAME
#line 100 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
{ parserStatus.CurrentExpr=CurrentSemanticValue.expr=Xcons.PATH(ValueStack[ValueStack.Depth-1].stringVal); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 102 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"

#line 103 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
internal Parser(Scanner lex,ParserStatus parserStatus=null) : base(lex) {
#line 104 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
		parserStatus.Sections.Add(parserStatus.currentSection);
#line 105 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
		this.parserStatus=parserStatus;
#line 106 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
}
#line 107 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
private ParserStatus parserStatus;
#line 108 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
public string ErrorMessage { get; private set; }
#line 109 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
public int ErrorCode { get; private set; }
#line 110 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"

#line 111 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
public delegate void OnParseErrorListener(int line,String near,Expr expr);
#line 112 "E:\Downloads\softwares\WaveSplitter\WaveSplitTextFormat\parser.y"
public OnParseErrorListener onParseErrorListener;
}
}
